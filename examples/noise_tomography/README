----------------------------------------------------------------------
README
----------------------------------------------------------------------

////////////////////////////////WARNING///////////////////////////////////////////
Do ***NOT*** try this example until you have become familiar with other examples
Also, make sure that you understand the theory in:
Noise Cross-Correlation Sensitivity Kernels (Tromp et al., 2010, GJI)
////////////////////////////////WARNING///////////////////////////////////////////


**************
0. README
**************

   This example shows how one can construct noise cross-correlation sensitivity kernels.
   Note that this example uses a relatively low resolution, and is only presented for illustrational purpose.

**************
1. Structure
**************

   This file                                                  ---  ./README
   Four folders contain default input files for the example   ---  ./bin      ./DATABASES_MPI       ./DATA       ./NOISE_TOMOGRAPHY
   Two matlab files may help you to calculate noise spectrum  ---  ./NOISE_TOMOGRAPHY.m     ./PetersonNoiseModel.m
   Job script                                                 ---  ./pre-processing.sh
   One folder shows the reference kernels                     ---  ./REF_KERNELS

**************
2. Usage
**************

   If you have at least 4 cores and mpif90 works on your workstation, you can run this example on your workstation. Simply use:
   (after configuration, for example, "./configure FC=ifort MPIFC=mpif90". Should you be confused, familiarize yourself with other examples first)
   ./pre-processing.sh

   If you don't, you have to follow commands listed in ./pre-processing.sh, make modifications if needed.
   Those commands in ./pre-processing.sh should be self-explanatory.
   You may want to compare them with descriptions in the Manual --- ../../doc/USER_MANUAL/manual_SPECFEM3D.pdf

**************
3. Details
**************

   3.0 - As mentioned before, you can always refer to "Noise Cross-Correlation Sensitivity Kernels (Tromp et al., 2010, GJI)" for theoretical perspective,
         and the Manual --- "../../doc/USER_MANUAL/manual_SPECFEM3D.pdf" for technical issues.

   3.1 - Model
         This example uses the same model as in '../examples/homogeneous_halfspace'
         In other words, the dimension of the model is 134 km * 134 km * 60 km, with Vp=2.8km/s, Vs=1.5km/s

         "./DATABASES_MPI" contains the four partitions for the model which you can also create by
         copying the MESH files from example '../examples/homogeneous_halfspace' and
         run 'xdecompose_mesh' as explained in the file README in '../examples/homogeneous_halfspace'

         Refer to '../examples/homogeneous_halfspace', if you don't know how to get them from CUBIT and SCOTCH.

   3.2 - Source and Receivers
         Since NO earthquakes are allowed for noise simulations, we have a ZERO moment tensor in "./DATA/CMTSOLUTION"
         As for receivers, instead of having a lot of stations in '../examples/homogeneous_halfspace',
         we have only two receivers in "./DATA/STATIONS" and "./DATA/STATIONS_ADJOINT"

   3.3 - Noise statistics
         "./NOISE_TOMOGRAPHY" contains:
                                       S_squared --- the ensemble-averaged noise power spectrum,
                                                     which can be easily generated by calling "NOISE_TOMOGRAPHY(2999,0.05,10,20,'NLNM')" in MATLAB
                                                     refer to "./NOISE_TOMOGRAPHY.m" for details about the MATLAB scripts
                                       nu_master --- the component of seismogram at the 'master' receiver, which is used to calculate cross correlations
                                                     (the components at 'slave' receivers are components of the simulated seismograms obtained in step 2 of noise simulations)
                                       irec_master_noise_contribution1, irec_master_noise_contribution2
                                                 --- master reciver ID
         Other statistics, such as noise direction & noise distribution, are described in "../../src/shared/noise_tomography.f90"
         The default assumes vertical noises and a uniform distribution.
         You may modify subroutine "noise_distribution_direction" in "../../src/shared/noise_tomography.f90" for your own purpose

   3.4 - Utils
         "./bin/adj_traveltime_filter.f90" is used to calculate adjoint sources (only works for default set-up)

**************
4. Results
**************

   At the end of those simulations, kernel files will be saved in SPECFEM3D/OUTPUT_FILES/NOISE_TOMOGRAPHY/1st/ & SPECFEM3D/OUTPUT_FILES/NOISE_TOMOGRAPHY/2nd/
   If mesh2vtu.pl works, you will have 1st_beta_kernel.vtu & 2nd_beta_kernel.vtu in SPECFEM3D/OUTPUT_FILES/NOISE_TOMOGRAPHY/, which can be directly viewed in Paraview
   Once you visualize them in Paraview, you should see pictures similar to those in SPECFEM3D/examples/noise_tomography/REF_KERNELS/
